foreign module StringFFI {
  concat: fn { s1: literal string, s2: literal string } -> literal string
}


module Strings {
  let ffi = import StringFFI

  let concat = fn ss -> {
    let s1raw =
      { let s1 = ss.s1
        s1.raw }
    let s2 = ss.s2
    let s2raw = s2.raw
    let concatinput = { s1: s1raw, s2: s2raw }
    let concat1 = ffi.concat
    let sout = concat1 concatinput
    { s1 with raw: sout }
  }

  let fromraw = fn s -> { raw: s }

  let str = fn s3 -> { raw: s3.raw
                       concat: fn s4 -> concat { s1: s3, s2: s4 } }

  { concat: concat
    fromraw: fromraw
    str: str }
}

foreign module ConsoleFFI {
  log: proc literal string -> literal int
}

module Console {
  let ffi = import ConsoleFFI

  let log = proc str1 -> do ffi.log str1.raw

  { log: log }
}

module Main {
  let console = import Console
  let strings = import Strings
  let main = proc x -> {
    let atr = strings.fromraw "hello"
    let str = strings.str atr
    let str2 = strings.fromraw " world"
    let str3 = str.concat str2
    do console.log str3
  }
  { main: main }
}