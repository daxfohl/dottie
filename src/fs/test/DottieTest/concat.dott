foreign module StringFFI {
  concat: fn { s1: literal string, s2: literal string } -> literal string
}


module Strings {
  let ffi = import StringFFI

  let concat = fn ss -> {
    let s1 = ss.s1
    let s2 = ss.s2
    let s1raw = s1.raw
    let s2raw = s2.raw
    let concatinput = { s1: s1raw, s2: s2raw }
    let concat = ffi.concat
    let sout = concat concatinput
    { s1 with raw: sout }
  }

  let fromraw = fn s -> { raw: s }

  let str = fn s -> { s with concat: concat { s1: s } }

  { concat: concat
    fromraw: fromraw
    str: str }
}

foreign module ConsoleFFI {
  log: fn literal string -> delayed unit
}

module Console {
  let ffi = import ConsoleFFI
  
  let log = fn str -> {
    let b = do ffi.log str.raw
    b
  }

  let log1 = fn str -> ffi.log str.raw

  { log: log
    log1: log1 }
}

module Main {
  let console = import Console
  let strings = import Strings
  let main = fn x -> {
    let str = strings.str "hello"
    let str2 = " world"
    let str3 = str.concat { s2: str2 }
    do console.log str3
  }
  { main: main }
}